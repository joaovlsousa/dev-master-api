generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  avatarUrl String   @map("avatar_url")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  teams   Team[]
  members Member[]
  tasks   Task[]
  invites Invite[]

  @@map("users")
}

model Team {
  id   String @id @default(cuid())
  name String

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String @map("owner_id")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  members  Member[]
  projects Project[]
  invites  Invite[]

  @@map("teams")
}

model Member {
  id   String @id @default(cuid())
  role Role   @default(MEMBER)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String @map("team_id")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  @@unique([teamId, userId])
  @@map("members")
}

model Project {
  id          String @id @default(cuid())
  name        String
  description String
  percentage  Float  @default(0)

  owner   Team   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String @map("owner_id")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  tasks Task[]

  @@map("projects")
}

model Task {
  id          String @id @default(cuid())
  description String
  percentage  Float  @default(0)

  member   User?   @relation(fields: [memberId], references: [id], onDelete: SetNull)
  memberId String? @map("member_id")

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String  @map("project_id")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  subTasks SubTask[]

  @@map("tasks")
}

model SubTask {
  id          String  @id @default(cuid())
  description String
  isDone      Boolean @default(false)

  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String @map("task_id")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  @@map("sub_tasks")
}

model Invite {
  id         String       @id @default(cuid())
  guestEmail String       @map("guest_email")
  role       Role         @default(MEMBER)
  status     InviteStatus @default(PENDING)

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String @map("author_id")

  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String @map("team_id")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  @@unique([guestEmail, teamId])
  @@index([guestEmail])
  @@map("invites")
}

enum Role {
  OWNER
  MEMBER
}

enum InviteStatus {
  PENDING
  ACCEPT
  REJECT
}
